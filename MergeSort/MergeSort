import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class MergeSort {

	static final int MAX=10005;
	static int[] a=new int [MAX];	
	
	public static void main(String args[]) {
	
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter Max Array Size:");
		int n=sc.nextInt();
		Random r=new Random();
		System.out.println("Enter Array Elements:");
		for(int i=0;i<n;i++)
			a[i]=r.nextInt(1000); //generate random numbers-uniform
								  //distribution
								  
		System.out.println("Input Array:");
		for(int i=0;i<n;i++)
			System.out.print(a[i]+"");
		
		//set Start Time
		
		long startTime=System.nanoTime();
		MergeAlgm(0, n-1);
		
		long stopTime=System.nanoTime();
		long elapsedTime=stopTime-startTime;
		
		System.out.println("\nSorted Array:");
		for(int i=0;i<n;i++)
			System.out.println(a[i]+"");
		System.out.println();
		System.out.println("Time Complexity in ms for n=" +n+ "is:" + (double)elapsedTime/1000000);
		
		}
		
		public static void MergeAlgm(int low,int high) {
		
			int mid;
			if(low<high)
			{
				mid=(low+high)/2;
				MergeAlgm(low,mid);
				MergeAlgm(mid+1,high);
				Merge(low,mid,high);		
		}
	}
	
	
		public static void Merge(int low, int mid, int high)
		{
		
			int[] b =new int[MAX];
			int i,h,j,k;
			h=i=low;
			j=mid+1;
			while((h<=mid)&&(j<=high))
				if(a[h]<a[j])
					b[i++]=a[h++];
				else
					b[i++]=a[j++];
			if(h>mid)
				for(k=j;k<=high;k++)
					b[i++]=a[k];
			else
				for(k=h;k<=mid;k++)
					b[i++]=a[k];
					
			for(k=low;k<=high;k++)
				a[k]=b[k];
						
		
		
		}
}
